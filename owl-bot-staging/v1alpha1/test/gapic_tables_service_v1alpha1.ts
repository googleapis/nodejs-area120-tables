// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as tablesserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha1.TablesServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = tablesserviceModule.v1alpha1.TablesServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = tablesserviceModule.v1alpha1.TablesServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = tablesserviceModule.v1alpha1.TablesServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.tablesServiceStub, undefined);
        await client.initialize();
        assert(client.tablesServiceStub);
    });

    it('has close method', () => {
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getTable', () => {
        it('invokes getTable without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table());
            client.innerApiCalls.getTable = stubSimpleCall(expectedResponse);
            const [response] = await client.getTable(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTable without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table());
            client.innerApiCalls.getTable = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTable(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.ITable|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTable with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetTableRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTable = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTable(request), expectedError);
            assert((client.innerApiCalls.getTable as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getWorkspace', () => {
        it('invokes getWorkspace without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetWorkspaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace());
            client.innerApiCalls.getWorkspace = stubSimpleCall(expectedResponse);
            const [response] = await client.getWorkspace(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkspace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getWorkspace without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetWorkspaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace());
            client.innerApiCalls.getWorkspace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getWorkspace(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IWorkspace|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWorkspace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getWorkspace with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetWorkspaceRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getWorkspace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getWorkspace(request), expectedError);
            assert((client.innerApiCalls.getWorkspace as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRow', () => {
        it('invokes getRow without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.getRow = stubSimpleCall(expectedResponse);
            const [response] = await client.getRow(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRow without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.getRow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRow(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IRow|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRow with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.GetRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRow(request), expectedError);
            assert((client.innerApiCalls.getRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createRow', () => {
        it('invokes createRow without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.CreateRowRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.createRow = stubSimpleCall(expectedResponse);
            const [response] = await client.createRow(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRow without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.CreateRowRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.createRow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRow(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IRow|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRow with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.CreateRowRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createRow(request), expectedError);
            assert((client.innerApiCalls.createRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchCreateRows', () => {
        it('invokes batchCreateRows without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchCreateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchCreateRowsResponse());
            client.innerApiCalls.batchCreateRows = stubSimpleCall(expectedResponse);
            const [response] = await client.batchCreateRows(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchCreateRows without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchCreateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchCreateRowsResponse());
            client.innerApiCalls.batchCreateRows = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchCreateRows(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IBatchCreateRowsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchCreateRows with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchCreateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchCreateRows = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchCreateRows(request), expectedError);
            assert((client.innerApiCalls.batchCreateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateRow', () => {
        it('invokes updateRow without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.UpdateRowRequest());
            request.row = {};
            request.row.name = '';
            const expectedHeaderRequestParams = "row.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.updateRow = stubSimpleCall(expectedResponse);
            const [response] = await client.updateRow(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateRow without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.UpdateRowRequest());
            request.row = {};
            request.row.name = '';
            const expectedHeaderRequestParams = "row.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row());
            client.innerApiCalls.updateRow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateRow(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IRow|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateRow with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.UpdateRowRequest());
            request.row = {};
            request.row.name = '';
            const expectedHeaderRequestParams = "row.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateRow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateRow(request), expectedError);
            assert((client.innerApiCalls.updateRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchUpdateRows', () => {
        it('invokes batchUpdateRows without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchUpdateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchUpdateRowsResponse());
            client.innerApiCalls.batchUpdateRows = stubSimpleCall(expectedResponse);
            const [response] = await client.batchUpdateRows(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchUpdateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchUpdateRows without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchUpdateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchUpdateRowsResponse());
            client.innerApiCalls.batchUpdateRows = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchUpdateRows(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IBatchUpdateRowsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchUpdateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchUpdateRows with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchUpdateRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchUpdateRows = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchUpdateRows(request), expectedError);
            assert((client.innerApiCalls.batchUpdateRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteRow', () => {
        it('invokes deleteRow without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.DeleteRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRow = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteRow(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteRow without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.DeleteRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteRow = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteRow(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteRow with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.DeleteRowRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteRow = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteRow(request), expectedError);
            assert((client.innerApiCalls.deleteRow as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchDeleteRows', () => {
        it('invokes batchDeleteRows without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchDeleteRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.batchDeleteRows = stubSimpleCall(expectedResponse);
            const [response] = await client.batchDeleteRows(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchDeleteRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchDeleteRows without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchDeleteRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.batchDeleteRows = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchDeleteRows(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchDeleteRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchDeleteRows with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.BatchDeleteRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchDeleteRows = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchDeleteRows(request), expectedError);
            assert((client.innerApiCalls.batchDeleteRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listTables', () => {
        it('invokes listTables without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
            ];
            client.innerApiCalls.listTables = stubSimpleCall(expectedResponse);
            const [response] = await client.listTables(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTables without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
            ];
            client.innerApiCalls.listTables = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTables(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.ITable[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTables with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listTables = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTables(request), expectedError);
            assert((client.innerApiCalls.listTables as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTablesStream without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
            ];
            client.descriptors.page.listTables.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTablesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Table[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Table) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTables.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTables, request));
        });

        it('invokes listTablesStream with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listTables.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTablesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Table[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Table) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTables.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTables, request));
        });

        it('uses async iteration with listTables without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Table()),
            ];
            client.descriptors.page.listTables.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.area120.tables.v1alpha1.ITable[] = [];
            const iterable = client.listTablesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listTables with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListTablesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listTables.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTablesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.area120.tables.v1alpha1.ITable[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTables.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listWorkspaces', () => {
        it('invokes listWorkspaces without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
            ];
            client.innerApiCalls.listWorkspaces = stubSimpleCall(expectedResponse);
            const [response] = await client.listWorkspaces(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkspaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkspaces without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
            ];
            client.innerApiCalls.listWorkspaces = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listWorkspaces(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IWorkspace[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWorkspaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listWorkspaces with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listWorkspaces = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWorkspaces(request), expectedError);
            assert((client.innerApiCalls.listWorkspaces as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWorkspacesStream without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
            ];
            client.descriptors.page.listWorkspaces.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listWorkspacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Workspace[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Workspace) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listWorkspaces.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkspaces, request));
        });

        it('invokes listWorkspacesStream with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listWorkspaces.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listWorkspacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Workspace[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Workspace) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listWorkspaces.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWorkspaces, request));
        });

        it('uses async iteration with listWorkspaces without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Workspace()),
            ];
            client.descriptors.page.listWorkspaces.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.area120.tables.v1alpha1.IWorkspace[] = [];
            const iterable = client.listWorkspacesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkspaces.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listWorkspaces with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListWorkspacesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listWorkspaces.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listWorkspacesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.area120.tables.v1alpha1.IWorkspace[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listWorkspaces.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listRows', () => {
        it('invokes listRows without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
            ];
            client.innerApiCalls.listRows = stubSimpleCall(expectedResponse);
            const [response] = await client.listRows(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRows without error using callback', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
            ];
            client.innerApiCalls.listRows = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRows(
                    request,
                    (err?: Error|null, result?: protos.google.area120.tables.v1alpha1.IRow[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listRows with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listRows = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRows(request), expectedError);
            assert((client.innerApiCalls.listRows as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRowsStream without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
            ];
            client.descriptors.page.listRows.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRowsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Row[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Row) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRows.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRows, request));
            assert.strictEqual(
                (client.descriptors.page.listRows.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listRowsStream with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listRows.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRowsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.area120.tables.v1alpha1.Row[] = [];
                stream.on('data', (response: protos.google.area120.tables.v1alpha1.Row) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRows.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRows, request));
            assert.strictEqual(
                (client.descriptors.page.listRows.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRows without error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
              generateSampleMessage(new protos.google.area120.tables.v1alpha1.Row()),
            ];
            client.descriptors.page.listRows.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.area120.tables.v1alpha1.IRow[] = [];
            const iterable = client.listRowsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRows.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRows.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRows with error', async () => {
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.area120.tables.v1alpha1.ListRowsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listRows.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRowsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.area120.tables.v1alpha1.IRow[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRows.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRows.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('row', () => {
            const fakePath = "/rendered/path/row";
            const expectedParameters = {
                table: "tableValue",
                row: "rowValue",
            };
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.rowPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rowPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rowPath', () => {
                const result = client.rowPath("tableValue", "rowValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rowPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchTableFromRowName', () => {
                const result = client.matchTableFromRowName(fakePath);
                assert.strictEqual(result, "tableValue");
                assert((client.pathTemplates.rowPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRowFromRowName', () => {
                const result = client.matchRowFromRowName(fakePath);
                assert.strictEqual(result, "rowValue");
                assert((client.pathTemplates.rowPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('table', () => {
            const fakePath = "/rendered/path/table";
            const expectedParameters = {
                table: "tableValue",
            };
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.tablePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.tablePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('tablePath', () => {
                const result = client.tablePath("tableValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.tablePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchTableFromTableName', () => {
                const result = client.matchTableFromTableName(fakePath);
                assert.strictEqual(result, "tableValue");
                assert((client.pathTemplates.tablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('workspace', () => {
            const fakePath = "/rendered/path/workspace";
            const expectedParameters = {
                workspace: "workspaceValue",
            };
            const client = new tablesserviceModule.v1alpha1.TablesServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workspacePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workspacePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('workspacePath', () => {
                const result = client.workspacePath("workspaceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.workspacePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchWorkspaceFromWorkspaceName', () => {
                const result = client.matchWorkspaceFromWorkspaceName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert((client.pathTemplates.workspacePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
